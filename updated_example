import glob
import h5py
import numpy as np
import os
from matplotlib import pyplot as plt
from FastLZeroSpikeInference import fast
from scipy.spatial.distance import squareform


def read_h5_file(file_path):
    try:
        # Read h5 file
        h5 = h5py.File(file_path, 'r')
        
        # Get data from h5 datastructure
        dto = 1.0 * np.array(h5['dto'])
        dte = 1.0 * np.array(h5['dte'])
        quiroga = 1.0 * np.array(h5['quiroga'])
        dff = np.array(h5['dff']).ravel()
        sptimes = np.array(h5['sptimes']).ravel()
        genotype = h5['genotype'][()].decode("utf-8")
        ephys = np.array(h5['ephys_baseline_subtracted']).ravel()

        return {
            "genotype": genotype,
            "dff": dff,
            "ephys": ephys,
            "dto": dto,
            "dte": dte,
            "sptimes": sptimes,
            "quiroga": quiroga
        }
    except Exception as e:
        print(f"Error reading file {file_path}: {e}")
        return None

def plot_data(data_dict, file_name):
    dto, dte, dff, ephys, sptimes, quiroga = (
        data_dict["dto"],
        data_dict["dte"],
        data_dict["dff"],
        data_dict["ephys"],
        data_dict["sptimes"],
        data_dict["quiroga"],
    )

    # Generate data for estimating spikes
    gam = 0.95
    lam = 0.05

    # Estimate spikes using FastLZeroSpikeInference
    fit = fast.estimate_spikes(data_dict["dff"], gam, lam, True, True)
    fit = fast.estimate_calcium(fit)

    # Ensure estimated data has the same length as original data
    estimated_calcium = fit['estimated_calcium'][:len(dff)]

    # Plot original data and estimated calcium values in subplots
    fig, axs = plt.subplots(3, 3, figsize=(18, 15))
    fig.suptitle(file_name)

    axs[0, 0].plot(np.arange(0, len(dff) * dto, dto), dff, 'g')
    axs[0, 0].set_ylabel('DF/F')
    axs[0, 0].set_title('Original Data')

    axs[1, 0].plot(np.arange(0, len(ephys) * dte, dte), 1000 * ephys, 'k')
    axs[1, 0].set_ylabel('mV')
    axs[1, 0].axhline(y=1000.0 * quiroga, color='r', alpha=0.5)
    axs[1, 0].set_title('Ephys')

    axs[2, 0].eventplot(
        sptimes,
        orientation='horizontal',
        lineoffsets=-1,
        linelengths=0.5,
        linewidths=None,
        colors='r',
        linestyles='solid'
    )
    axs[2, 0].set_ylabel('spikes')
    axs[2, 0].set_xlabel('Time [s]')
    axs[2, 0].tick_params(labelleft=False)
    axs[2, 0].set_title('Spike Times')

    axs[0, 2].plot(np.arange(0, len(dff) * dto, dto), estimated_calcium, 'b')
    axs[0, 2].set_ylabel('DF/F')
    axs[0, 2].set_title('Estimated Calcium')

    # Plot estimated spike times with the same x-axis range as original spike times
    axs[1, 2].eventplot(
        fit['spikes'] * data_dict["dto"],  # Use data_dict["dto"] instead of dto
        orientation='horizontal',
        lineoffsets=-1,
        linelengths=0.5,
        linewidths=None,
        colors='b',
        linestyles='solid'
    )
    axs[1, 2].set_ylabel('spikes')
    axs[1, 2].set_xlabel('Time [s]')
    axs[1, 2].tick_params(labelleft=False)
    axs[1, 2].set_title('Estimated Spike Times')

    plt.savefig(f'{file_name}_traces.png')
    plt.show()

# Set the directory path
data_directory = "/Users/petrusgynther/Desktop/ca-signal-deconvolution-main"

# Get all .h5 files' names
path = os.path.join(data_directory, "src", "*.h5")
# Set the directory path
data_directory = "/Users/petrusgynther/Desktop/ca-signal-deconvolution-main"
# Get all .h5 files' names
path = os.path.join(data_directory, "src", "*.h5")
best_score = float('inf')
best_distance = float('inf')

tau_value = 0.1
tau_R = 0.1

def calculate_schreiber_similarity(true_spikes, estimated_spikes, sigma_S):
    true_spikes = np.array(true_spikes)
    estimated_spikes = np.array(estimated_spikes)
    
    # Calculate time values for the continuous functions
    max_spike_time = max(np.max(true_spikes), np.max(estimated_spikes))
    t_values = np.arange(0, max_spike_time, 0.001)
    
    # Create continuous signals using Gaussian convolution
    x_prime = np.zeros_like(t_values)
    y_prime = np.zeros_like(t_values)
    
    for spike_time in true_spikes:
        x_prime += np.exp(-(t_values - spike_time)**2 / (2 * sigma_S**2))
    
    for spike_time in estimated_spikes:
        y_prime += np.exp(-(t_values - spike_time)**2 / (2 * sigma_S**2))
    
    # Normalize the signals
    x_prime /= np.trapz(x_prime, dx=0.001)
    y_prime /= np.trapz(y_prime, dx=0.001)
    
    # Calculate cross-correlation
    cross_correlation = np.correlate(x_prime, y_prime, mode='same')
    
    # Calculate Schreiber similarity
    schreiber_similarity = cross_correlation.max() / (np.sqrt(np.sum(x_prime**2) * np.sum(y_prime**2)))
    
    return schreiber_similarity

def calculate_victor_purpura_distance(true_spikes, estimated_spikes, max_time, bin_size):
    true_spikes = np.array(true_spikes)
    estimated_spikes = np.array(estimated_spikes)
    
    num_bins = int(max_time / bin_size)
    
    true_histogram, _ = np.histogram(true_spikes, bins=num_bins, range=(0, max_time))
    estimated_histogram, _ = np.histogram(estimated_spikes, bins=num_bins, range=(0, max_time))
    
    # Calculate coincidences
    coincidences = true_histogram * estimated_histogram
    
    vp_distance = np.sum(np.abs(true_histogram - coincidences))
    
    return vp_distance


def calculate_van_rossum_distance(true_spikes, estimated_spikes, tau_R):
    true_spikes = np.array(true_spikes)
    estimated_spikes = np.array(estimated_spikes)
    
    max_spike_time = max(np.max(true_spikes), np.max(estimated_spikes))
    t_values = np.arange(0, max_spike_time, 0.001)  # Choose an appropriate time step
    
    x_waveform = np.zeros_like(t_values)
    y_waveform = np.zeros_like(t_values)
    
    for spike_time in true_spikes:
        x_waveform += np.exp(-t_values / tau_R) * (t_values >= spike_time)
    
    for spike_time in estimated_spikes:
        y_waveform += np.exp(-t_values / tau_R) * (t_values >= spike_time)
    
    van_rossum_distance = np.sqrt(np.trapz((x_waveform - y_waveform)**2, dx=0.001) / tau_R)
    
    return van_rossum_distance

gam = 0.95
lam = 0.05
sigma_S = 0.1
for file_path in glob.glob(path):
    file_name = os.path.split(file_path)[-1].split(".")[0]
    print(f"Processing file: {file_name}")

    data_dict = read_h5_file(file_path)
    if data_dict is not None:
        fit = fast.estimate_spikes(data_dict["dff"], gam, lam, True, True)
        fit = fast.estimate_calcium(fit)
        start_time = 0  # Modify this to match your plot's start time
        end_time = len(data_dict["dff"]) * data_dict["dto"]  # Modify this to match your plot's end time

        # Filter spikes within the specified time range
        true_spikes_in_range = [spike for spike in data_dict["sptimes"] if start_time <= spike <= end_time]
        estimated_spikes_in_range = [spike * data_dict["dto"] for spike in fit['spikes'] if start_time <= spike * data_dict["dto"] <= end_time]

        num_spikes_original = len(true_spikes_in_range)
        num_estimated_spikes = len(estimated_spikes_in_range)

        print("Number of spikes in the original data:", num_spikes_original)
        print("Number of estimated spikes:", num_estimated_spikes)

        # Calculate Victor-Purpura distance
        vp_distance = calculate_victor_purpura_distance(data_dict["sptimes"], fit['spikes'] * data_dict["dto"], len(data_dict["dff"]) * data_dict["dto"], tau_value)
        print("Victor-Purpura distance:", vp_distance)

        # Calculate Van Rossum distance
        vr_distance = calculate_van_rossum_distance(true_spikes_in_range, estimated_spikes_in_range, tau_R)
        print("Van Rossum distance:", vr_distance)

        #schreiber similarity
        schreiber_similarity = calculate_schreiber_similarity(data_dict["sptimes"], fit['spikes'] * data_dict["dto"], sigma_S)
        print("Schreiber similarity:", schreiber_similarity)

        plot_data(data_dict, file_name)   

# Set the directory path
data_directory = "/Users/petrusgynther/Desktop/ca-signal-deconvolution-main"
# Get all .h5 files' names
path = os.path.join(data_directory, "src", "*.h5")


gam_values = [0.95, 0.96, 0.97, 0.99, 0.9]
lambda_values = [0.05, 0.3, 0.1, 0.2, 0.0001]

best_distance_vp = float('inf')
second_best_distance_vp = float('inf')
best_distance_vr = float('inf')
second_best_distance_vr = float('inf')
best_similarity_schreiber = 0.0  # Initialize with lowest Schreiber similarity
second_best_similarity_schreiber = 0.0

best_params_vp = {}
second_best_params_vp = {}
best_params_vr = {}
second_best_params_vr = {}
best_params_schreiber = {}
second_best_params_schreiber = {}

for gam in gam_values:
    for lam in lambda_values:
        total_distance_vp = 0
        total_distance_vr = 0
        
        for file_path in glob.glob(path):
            file_name = os.path.split(file_path)[-1].split(".")[0]
            data_dict = read_h5_file(file_path)
            
            if data_dict is not None:
                fit = fast.estimate_spikes(data_dict["dff"], gam, lam, True, True)
                fit = fast.estimate_calcium(fit)
                
                # Calculate Victor-Purpura distance
                distance_vp = calculate_victor_purpura_distance(data_dict["sptimes"], fit['spikes'] * data_dict["dto"], len(data_dict["dff"]) * data_dict["dto"], tau_value)
                total_distance_vp += distance_vp
                
                # Calculate Van Rossum distance
                distance_vr = calculate_van_rossum_distance(data_dict["sptimes"], fit['spikes'] * data_dict["dto"], tau_R)
                
                # Calculate Schreiber similarity
                schreiber_similarity = calculate_schreiber_similarity(data_dict["sptimes"], fit['spikes'] * data_dict["dto"], sigma_S)
                
                # Update best and second best parameters for Victor-Purpura distance
                if total_distance_vp < best_distance_vp:
                    second_best_distance_vp = best_distance_vp
                    second_best_params_vp = best_params_vp
                    best_distance_vp = total_distance_vp
                    best_params_vp = {'gam': gam, 'lambda': lam}
                elif total_distance_vp < second_best_distance_vp:
                    second_best_distance_vp = total_distance_vp
                    second_best_params_vp = {'gam': gam, 'lambda': lam}
                
                # Update best and second best parameters for Van Rossum distance
                if distance_vr < best_distance_vr:
                    second_best_distance_vr = best_distance_vr
                    second_best_params_vr = best_params_vr
                    best_distance_vr = distance_vr
                    best_params_vr = {'gam': gam, 'lambda': lam}
                elif distance_vr < second_best_distance_vr:
                    second_best_distance_vr = distance_vr
                    second_best_params_vr = {'gam': gam, 'lambda': lam}
                
                # Update best and second best parameters for Schreiber similarity
                if schreiber_similarity > best_similarity_schreiber:
                    second_best_similarity_schreiber = best_similarity_schreiber
                    second_best_params_schreiber = best_params_schreiber
                    best_similarity_schreiber = schreiber_similarity
                    best_params_schreiber = {'gam': gam, 'lambda': lam}
                elif schreiber_similarity > second_best_similarity_schreiber:
                    second_best_similarity_schreiber = schreiber_similarity
                    second_best_params_schreiber = {'gam': gam, 'lambda': lam}

# Print the results for Victor-Purpura distance
print("Best Parameters for Victor-Purpura Distance:", best_params_vp)
print("Second Best Parameters for Victor-Purpura Distance:", second_best_params_vp)
print("Best Victor-Purpura Distance:", best_distance_vp)
print("Second Best Victor-Purpura Distance:", second_best_distance_vp)

# Print the results for Van Rossum distance
print("Best Parameters for Van Rossum Distance:", best_params_vr)
print("Second Best Parameters for Van Rossum Distance:", second_best_params_vr)
print("Best Van Rossum Distance:", best_distance_vr)
print("Second Best Van Rossum Distance:", second_best_distance_vr)

# Print the results for Schreiber similarity
print("Best Parameters for Schreiber Similarity:", best_params_schreiber)
print("Second Best Parameters for Schreiber Similarity:", second_best_params_schreiber)
print("Best Schreiber Similarity:", best_similarity_schreiber)
print("Second Best Schreiber Similarity:", second_best_similarity_schreiber)
